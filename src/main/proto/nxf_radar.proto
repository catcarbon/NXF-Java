syntax = "proto3";

package nxf;

/**
  Top level message used to draw objects on the scope.
  Includes radar return and minimum information necessary to construct a data block.
 */
message Track {
  uint32 id = 1;

  // Radar targets must live inside a track
  message RadarTarget {
    string lat = 1;
    string lon = 2;
    enum TransponderMode {
      NoMode = 0;
      ModeA = 1;
      ModeC = 2;
      ModeS = 3;
    }
    TransponderMode transponder_mode = 3;
    bytes beacon_code = 4;
    //uint32 calculated_ground_speed = 5;
    //uint32 calculated_heading = 6;
    uint64 return_time = 7;
    optional uint32 reported_altitude = 8;  // Needs at least Mode C
    optional bytes mode_s_address = 9;  // Mode S only
  }
  repeated RadarTarget radar_target = 2;  // client: store history dots, derive ground speed and heading

  optional FlightStrip flight_strip = 3;

  message ControllingUnit {
    string facility = 1;
    string sector = 2;
  }
  optional ControllingUnit current_controller = 4;
  optional ControllingUnit next_controller = 5;

  reserved 6 to 10;

  // lld has a default type so it won't be empty
  enum LeaderLineDirection {
    DEFAULT = 0;
    NW = 1;
    N = 2;
    NE = 3;
    W = 4;
    HIDE = 5;
    E = 6;
    SW = 7;
    S = 8;
    SE = 9;
  }
  LeaderLineDirection leader_line_direction = 11;

  optional uint32 assigned_temporary_altitude = 12;
  optional string pad_1 = 13;
  optional string pad_2 = 14;
  optional string runway = 15;
  optional string exit_fix = 16;
}

/**
  Flight strip message that could be used to supplement data block display.
 */
message FlightStrip {
  uint32 id = 1;
  string aircraft_type = 2;
  string aircraft_callsign = 3;
  optional bytes aircraft_address = 4;  // Mode S only

  enum WakeCategory {
    NoWeight = 0;
    CatA = 1;
    CatB = 2;
    CatC = 3;
    CatD = 4;
    CatE = 5;
    CatF = 6;
  }
  WakeCategory wake_category = 5;

  enum FlightRule {
    Instrument = 0;
    Visual = 1;
    SpecialVisual = 2;
    DefenseVisual = 3;
  }
  FlightRule flight_rule = 6;

  string destination = 7;
  uint32 requested_altitude = 8;
  bytes assigned_beacon_code = 9;
  optional string route_string = 10;
}

/**
  Message to update stored messages on client.
 */
message RadarUpdateMessage {
  oneof updated_content {
    Track.RadarTarget radar_target = 1;  // supply new radar target to a track
    Track track = 2;
    FlightStrip flight_strip = 3;
  }

  uint32 updated_message_id = 4;  // if new radar target is supplied, find track by id
}
